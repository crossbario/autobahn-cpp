///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Tavendo GmbH
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef AUTOBAHN_WAMP_TRANSPORT_HANDLER_HPP
#define AUTOBAHN_WAMP_TRANSPORT_HANDLER_HPP

// http://stackoverflow.com/questions/22597948/using-boostfuture-with-then-continuations/
#ifndef BOOST_THREAD_PROVIDES_FUTURE
#define BOOST_THREAD_PROVIDES_FUTURE
#define BOOST_THREAD_PROVIDES_FUTURE_CONTINUATION
#define BOOST_THREAD_PROVIDES_FUTURE_WHEN_ALL_WHEN_ANY
#endif

#include "wamp_message.hpp"

#include <boost/thread/future.hpp>
#include <memory>
#include <string>

namespace autobahn {

class wamp_transport;

/*!
 * Provides an abstraction for associating a handler with a transport.
 */
class wamp_transport_handler
{
public:
    /*!
     * Called by the transport when attaching a handler.
     *
     * @param transport The transport being attached to.
     */
    virtual void on_attach(const std::shared_ptr<wamp_transport>& transport) = 0;

    /*!
     * Called by the transport when detaching a handler.
     *
     * @param was_clean Whether or not the transport is cleanly detaching.
     * @param reason The reason for detaching.
     */
    virtual void on_detach(bool was_clean, const std::string& reason) = 0;

    /*!
     * Called by the transport when a message is received.
     *
     * @param message The message that has been received.
     */
    virtual void on_message(wamp_message&& message) = 0;

    /*!
     * Default virtual destructor.
     */
    virtual ~wamp_transport_handler() = default;
};

} // namespace autobahn

#endif // AUTOBAHN_WAMP_TRANSPORT_HANDLER_HPP
