///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Crossbar.io Technologies GmbH and contributors
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

namespace autobahn {

template <typename T>
inline wamp_async<T>::wamp_async()
    : m_async(boost::promise<T>())
{
}

template <typename T>
inline wamp_async<T>::wamp_async(on_success_handler && on_success,
                                 on_exception_handler && on_exception)
    : m_async(pair_type({std::move(on_success), std::move(on_exception)}))
{
}

template <typename T>
inline void wamp_async<T>::set_value(const T & t)
{
    if (is_promise()) {
        promise().set_value(t);
    }
    else if (on_success()) {
        on_success()(t);
    }
}

template <typename T>
inline void wamp_async<T>::set_value(T && t)
{
    if (is_promise()) {
        promise().set_value(std::forward<T>(t));
    }
    else if (on_success()) {
        on_success()(std::forward<T>(t));
    }
}

template <typename T>
inline void wamp_async<T>::set_exception(const boost::exception_ptr & eptr)
{
    if (is_promise()) {
        promise().set_exception(eptr);
    }
    else if (on_exception()) {
        on_exception()(eptr);
    }
}

template <typename T>
inline bool wamp_async<T>::is_promise() const
{
    return m_async.which() == 0;
}

template <typename T>
inline boost::promise<T>& wamp_async<T>::promise()
{
    return boost::get<boost::promise<T>>(m_async);
}

template <typename T>
inline typename wamp_async<T>::on_success_handler& wamp_async<T>::on_success()
{
    return boost::get<pair_type>(m_async).first;
}

template <typename T>
inline typename wamp_async<T>::on_exception_handler& wamp_async<T>::on_exception()
{
    return boost::get<pair_type>(m_async).second;
}

inline wamp_async<void>::wamp_async()
    : m_async(boost::promise<void>())
{
}

inline wamp_async<void>::wamp_async(on_success_handler && on_success,
                                    on_exception_handler && on_exception)
    : m_async(pair_type({std::move(on_success), std::move(on_exception)}))
{
}

inline void wamp_async<void>::set_value()
{
    if (is_promise()) {
        promise().set_value();
    }
    else if (on_success()) {
        on_success()();
    }
}

inline void wamp_async<void>::set_exception(const boost::exception_ptr & eptr)
{
    if (is_promise()) {
        promise().set_exception(eptr);
    }
    else if (on_exception()) {
        on_exception()(eptr);
    }
}

inline bool wamp_async<void>::is_promise() const
{
    return m_async.which() == 0;
}

inline boost::promise<void>& wamp_async<void>::promise()
{
    return boost::get<boost::promise<void>>(m_async);
}

inline wamp_async<void>::on_success_handler& wamp_async<void>::on_success()
{
    return boost::get<pair_type>(m_async).first;
}

inline wamp_async<void>::on_exception_handler& wamp_async<void>::on_exception()
{
    return boost::get<pair_type>(m_async).second;
}

} // namespace autobahn
