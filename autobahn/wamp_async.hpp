///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Crossbar.io Technologies GmbH and contributors
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef AUTOBAHN_WAMP_ASYNC_HPP
#define AUTOBAHN_WAMP_ASYNC_HPP

#include "boost_config.hpp"

#include <boost/exception_ptr.hpp>
#include <boost/variant.hpp>
#include <functional>

namespace autobahn {

/// Async mechanism, either a promise or handlers.
template <typename T>
class wamp_async
{
public:
    using on_success_handler = std::function<void(const T &)>;
    using on_exception_handler = std::function<void(const boost::exception_ptr &)>;

    /// Use promise
    wamp_async();

    /// Use handlers
    wamp_async(on_success_handler && on_sucess,
               on_exception_handler && on_exception);

    void set_value(const T &);
    void set_value(T &&);
    void set_exception(const boost::exception_ptr &);

    bool is_promise() const;
    boost::promise<T>& promise();
    on_success_handler& on_success();
    on_exception_handler& on_exception();

private:
    using pair_type = std::pair< on_success_handler, on_exception_handler >;

    boost::variant< boost::promise<T>, pair_type > m_async;
};

/// Async mechanism, either a promise or handlers, void specialization.
template <>
class wamp_async<void>
{
public:
    using on_success_handler = std::function<void()>;
    using on_exception_handler = std::function<void(const boost::exception_ptr &)>;

    /// Use promise
    wamp_async();

    /// Use handlers
    wamp_async(on_success_handler && on_sucess,
               on_exception_handler && on_exception);

    void set_value();
    void set_exception(const boost::exception_ptr &);

    bool is_promise() const;
    boost::promise<void>& promise();
    on_success_handler& on_success();
    on_exception_handler& on_exception();

private:
    using pair_type = std::pair< on_success_handler, on_exception_handler >;

    boost::variant< boost::promise<void>, pair_type > m_async;
};

} // namespace autobahn

#include "wamp_async.ipp"

#endif // AUTOBAHN_WAMP_ASYNC_HPP