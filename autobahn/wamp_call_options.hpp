///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Tavendo GmbH
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef AUTOBAHN_WAMP_CALL_OPTIONS_HPP
#define AUTOBAHN_WAMP_CALL_OPTIONS_HPP

#include <chrono>
#include <boost/optional.hpp>

namespace autobahn {

class wamp_call_options
{
public:
    wamp_call_options();

    wamp_call_options(wamp_call_options&& other) = delete;
    wamp_call_options(const wamp_call_options& other) = delete;
    wamp_call_options& operator=(wamp_call_options&& other) = delete;
    wamp_call_options& operator=(const wamp_call_options& other) = delete;

    const std::chrono::milliseconds& timeout() const;
    void set_timeout(const std::chrono::milliseconds& timeout);
    const bool is_timeout_set() const;

    const bool disclose_me() const;
    void set_disclose_me(bool disclose_me);
    const bool is_disclose_me_set() const;

private:
    boost::optional<std::chrono::milliseconds> m_timeout;
    boost::optional<bool> m_disclose_me;
};

} // namespace autobahn

#include "wamp_call_options.ipp"

#endif // AUTOBAHN_WAMP_CALL_OPTIONS_HPP
