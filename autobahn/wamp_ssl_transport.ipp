///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Tavendo GmbH
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#include "wamp_ssl_transport.hpp"

#include <boost/system/error_code.hpp>

namespace autobahn {

inline wamp_ssl_transport::wamp_ssl_transport(
        boost::asio::io_service& io_service,
        const ssl_endpoint_type& remote_endpoint,
	boost::asio::ssl::context& context,
        bool debug_enabled)
    : wamp_rawsocket_transport<ssl_socket_type>(
            remote_endpoint, debug_enabled)
    , m_socket(io_service,context)
{
}

inline wamp_ssl_transport::~wamp_ssl_transport()
{
}


inline boost::future<void> wamp_ssl_transport::connect()
{
    return wamp_rawsocket_transport<ssl_socket_type>::connect().then(
        [&](boost::future<void> connected) {
            // Check the originating future for exceptions.
            connected.get();

            // Disable naggle for improved performance.
            boost::asio::ip::tcp::no_delay option(true);
            socket().lowest_layer().set_option(option);
        }
    );
}

inline void wamp_ssl_transport::async_connect(
        endpoint_type & endpoint,
	std::function<void (const boost::system::error_code&)> connect_handler )
{

    auto do_ssl_handshake = [=](const boost::system::error_code& error_code) {
	
	if ( !error_code ) {
    		std::cerr << "connection succeded!" << std::endl;
    		std::cerr << "start ssl handshake" << std::endl;
                socket().async_handshake(boost::asio::ssl::stream_base::client,connect_handler);
	}else{
	   // we just pass the error to the generic connect handler
    	   std::cerr << "connection failed!" << std::endl;
           connect_handler( error_code );
	}
    };

    // before calling the connect_handler, we do a ssl-handshake
    socket().lowest_layer().async_connect( endpoint, do_ssl_handshake );
}


} // namespace autobahn
