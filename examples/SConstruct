###############################################################################
#
# Copyright (c) Crossbar.io Technologies GmbH and contributors
#
# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the 'Software') to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
###############################################################################

import os, commands

env = Environment()

if 'CXX' in os.environ:
    env['CXX'] = os.environ['CXX']

if 'clang++' in env['CXX']:

    print('Using clang toolchain')

    env.Append(CXXFLAGS=['-std=c++11',
                         '-stdlib=libc++',
                         '-O2',
                         '-Wall',
                         '-pedantic',
                         '-Wno-unused-value',
                         '-Wno-deprecated',
                         '-pthread'])

    env.Append(LINKFLAGS=['-stdlib=libc++', '-pthread'])

elif 'g++' in env['CXX']:

    print('Using GNU toolchain')

    GCC_VERSION = commands.getoutput(env['CXX'] + ' -dumpversion')
    if GCC_VERSION < '4.3.0':
        raise Exception('GCC version {} detected with no or insufficient C++ 11 support detected'.format(GCC_VERSION))

    env.Append(CXXFLAGS=['-std=c++11',
                         '-O2',
                         '-Wall',
                         '-pedantic',
                         '-Wno-deprecated-declarations',
                         '-Wno-unused-local-typedefs',
                         '-Wl,--no-as-needed',
                         '-pthread'])

    env.Append(LINKFLAGS=['-pthread'])

else:
    raise Exception('Uups. The toolchain {} is new to me =('.format(env['CXX']))


env.Append(CPPPATH=['/usr/local/include'])
env.Append(LIBPATH=['/usr/lib'])

examples = [('subscriber.cpp', []),
            ('publisher.cpp', []),
            ('provide_prefix.cpp', []),
            ('callee.cpp', []),
            ('callee-ssl.cpp', ['crypto','ssl']),
            ('caller.cpp', []),
            ('wampcra.cpp', ['crypto']),
            ('websocket_callee.cpp', ['crypto', 'ssl']),
            ('uds.cpp', [])]

parameters = env.StaticLibrary('parameters', ['parameters.cpp'])

prgs = []

for e, extralibs in examples:
    prgs.append(env.Program(e, LIBS=[
        parameters,
        'boost_thread',
        'boost_system',
        'boost_program_options',
        'msgpackc'] + extralibs))
